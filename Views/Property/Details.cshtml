@using System.Security.Claims
@model RealEStateProject.ViewModels.Property.PropertyViewModel
@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-4">
    <!-- Property Navigation -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-action="Search">Properties</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
        </ol>
    </nav>
    
    <!-- Property Header & Actions -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">@Model.Title</h2>
        <div>
            @if (User.Identity.IsAuthenticated)
            {
                <button class="btn @(ViewBag.IsFavorite ? "btn-danger" : "btn-outline-danger")" id="favoriteButton"
                        data-property-id="@Model.Id">
                    <i class="bi @(ViewBag.IsFavorite ? "bi-heart-fill" : "bi-heart")"></i>
                    <span id="favoriteText">@(ViewBag.IsFavorite ? "Remove from Favorites" : "Add to Favorites")</span>
                </button>
            }
            @if (Model.AgentId == User.FindFirstValue(ClaimTypes.NameIdentifier))
            {
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary ms-2">
                    <i class="bi bi-pencil"></i> Edit
                </a>
            }
        </div>
    </div>

    <!-- Property Status Bar -->
    <div class="card mb-4 border-0 bg-light shadow-sm">
        <div class="card-body py-3">
            <div class="row align-items-center">
                <div class="col-md-4">
                    <h3 class="text-primary mb-0">$@Model.Price.ToString("N0")</h3>
                </div>
                <div class="col-md-4 text-center">
                    <span class="badge bg-success me-2 p-2">@Model.Status</span>
                    <span class="badge bg-info p-2">@Model.Type</span>
                </div>
                <div class="col-md-4 text-md-end">
                    <i class="fa fa-map-marker-alt text-primary me-2"></i>
                    @Model.City, @Model.State @Model.ZipCode
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Content Column -->
        <div class="col-lg-8">
            <!-- Images Carousel -->
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-body p-0">
                    <div id="propertyCarousel" class="carousel slide" data-bs-ride="carousel">
                        <!-- Image Counter Indicator -->
                        @if (Model.ImageUrls != null && Model.ImageUrls.Any())
                        {
                            <div class="image-counter position-absolute top-0 end-0 me-3 mt-3 bg-dark bg-opacity-50 rounded px-2 py-1 z-index-1">
                                <span class="text-white small"><i class="bi bi-images me-1"></i><span id="currentImageIndex">1</span>/@Model.ImageUrls.Count()</span>
                            </div>
                        }

                        <div class="carousel-inner">
                            @if (Model.ImageUrls != null && Model.ImageUrls.Any())
                            {
                                var imageUrlsList = Model.ImageUrls.ToList();
                                for (int i = 0; i < imageUrlsList.Count; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@imageUrlsList[i]" class="d-block w-100" alt="Property Image" style="max-height: 600px; object-fit: cover;">
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="carousel-item active">
                                    <img src="/images/placeholder.png" class="d-block w-100" alt="No Image" style="max-height: 600px; object-fit: cover;">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#propertyCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#propertyCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Quick Info -->
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-3">
                            <div class="d-flex flex-column align-items-center">
                                <i class="fa fa-bed text-primary mb-2 fa-2x"></i>
                                <span class="fw-bold">@Model.Bedrooms</span>
                                <small class="text-muted">Bedrooms</small>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="d-flex flex-column align-items-center">
                                <i class="fa fa-bath text-primary mb-2 fa-2x"></i>
                                <span class="fw-bold">@Model.Bathrooms</span>
                                <small class="text-muted">Bathrooms</small>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="d-flex flex-column align-items-center">
                                <i class="fa fa-ruler-combined text-primary mb-2 fa-2x"></i>
                                <span class="fw-bold">@Model.SquareFeet</span>
                                <small class="text-muted">Sq.Ft</small>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="d-flex flex-column align-items-center">
                                <i class="fa fa-calendar text-primary mb-2 fa-2x"></i>
                                <span class="fw-bold">@Model.YearBuilt</span>
                                <small class="text-muted">Year Built</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Property Tabs -->
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-body">
                    <ul class="nav nav-tabs" id="propertyTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button" role="tab" aria-controls="description" aria-selected="true">Description</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="features-tab" data-bs-toggle="tab" data-bs-target="#features" type="button" role="tab" aria-controls="features" aria-selected="false">Features</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="location-tab" data-bs-toggle="tab" data-bs-target="#location" type="button" role="tab" aria-controls="location" aria-selected="false">Location</button>
                        </li>
                    </ul>
                    <div class="tab-content py-3" id="propertyTabsContent">
                        <!-- Description Tab -->
                        <div class="tab-pane fade show active" id="description" role="tabpanel" aria-labelledby="description-tab">
                            <h4 class="mb-3">Property Details</h4>
                            <p>@Model.Description</p>
                            <p class="mt-3">
                                <strong>Full Address:</strong> @Model.Address, @Model.City, @Model.State @Model.ZipCode
                            </p>
                        </div>
                        
                        <!-- Features Tab -->
                        <div class="tab-pane fade" id="features" role="tabpanel" aria-labelledby="features-tab">
                            <h4 class="mb-3">Property Features</h4>
                            <div class="row">
                                @if (Model.Features != null && Model.Features.Any())
                                {
                                    foreach (var feature in Model.Features)
                                    {
                                        <div class="col-md-4 mb-2">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                                <span>@feature</span>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-12">
                                        <p class="text-muted">No additional features listed.</p>
                                    </div>
                                }
                            </div>
                        </div>
                        
                        <!-- Location Tab -->
                        <div class="tab-pane fade" id="location" role="tabpanel" aria-labelledby="location-tab">
                            <h4 class="mb-3">Property Location</h4>
                            <div id="propertyMap" style="height: 400px;" class="w-100 border rounded"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reviews Section -->
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="mb-0">Reviews</h4>
                        <div class="d-flex align-items-center">
                            <div class="rating-stars me-2">
                                @for (var i = 1; i <= 5; i++)
                                {
                                    <i class="bi @(Model.AverageRating >= i ? "bi-star-fill" : (Model.AverageRating >= i - 0.5 ? "bi-star-half" : "bi-star"))" style="color: #ffc107;"></i>
                                }
                            </div>
                            <span class="text-muted">(@Model.ReviewCount reviews)</span>
                        </div>
                    </div>

                    <!-- Add Review Form -->
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="mb-4 border-bottom pb-4">
                            <form id="reviewForm">
                                <input type="hidden" name="PropertyId" value="@Model.Id" />
                                @Html.AntiForgeryToken()

                                <!-- Star Rating Selection -->
                                <div class="mb-3">
                                    <label class="form-label">Your Rating</label>
                                    <div class="star-rating">
                                        <div class="rating-group">
                                            @for (var i = 1; i <= 5; i++)
                                            {
                                                <label aria-label="@i star" class="rating__label" for="rating-@i">
                                                    <i class="rating__icon rating__icon--star bi bi-star"></i>
                                                </label>
                                                <input class="rating__input" name="Rating" id="rating-@i" value="@i" type="radio" required>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="reviewComment" class="form-label">Your Review</label>
                                    <textarea class="form-control" id="reviewComment" name="Comment" rows="3" placeholder="Share your experience with this property..." required></textarea>
                                </div>
                                <button type="button" id="submitReview" class="btn btn-primary">Submit Review</button>
                            </form>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-4">
                            <p class="mb-2">Please log in to leave a review.</p>
                            <a class="btn btn-primary" asp-area="Identity" asp-page="/Account/Login">Login</a>
                        </div>
                    }

                    <!-- Reviews List Container -->
                    <div id="reviewsContainer">
                        <!-- Loading spinner -->
                        <div class="text-center py-3" id="reviewsLoading">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading reviews...</span>
                            </div>
                            <p class="text-muted mt-2">Loading reviews...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar Column -->
        <div class="col-lg-4">
            <!-- Agent Info -->
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-header bg-primary text-white py-3">
                    <h5 class="mb-0">Agent Information</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="flex-shrink-0">
                            <img src="/images/agent.jpg" alt="Agent" class="rounded-circle" style="width: 60px; height: 60px; object-fit: cover;">
                        </div>
                        <div class="ms-3">
                            <h5 class="mb-0">@Model.AgentName</h5>
                            <p class="text-muted mb-0">Real Estate Agent</p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-telephone me-2"></i>
                            <span>@Model.AgentPhone</span>
                        </div>
                        <div class="d-flex align-items-center">
                            <i class="bi bi-envelope me-2"></i>
                            <span>@Model.AgentEmail</span>
                        </div>
                    </div>
                    <button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#contactAgentModal">Contact Agent</button>
                </div>
            </div>

            <!-- Property Ratings Overview -->
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-header bg-primary text-white py-3">
                    <h5 class="mb-0">Property Rating</h5>
                </div>
                <div class="card-body">
                    <div class="text-center mb-3">
                        <h2 class="mb-0">@(Model.AverageRating > 0 ? Model.AverageRating.ToString("0.0") : "No ratings")</h2>
                        <div class="rating-stars mb-2">
                            @for (var i = 1; i <= 5; i++)
                            {
                                <i class="bi @(Model.AverageRating >= i ? "bi-star-fill" : (Model.AverageRating >= i - 0.5 ? "bi-star-half" : "bi-star"))" style="color: #ffc107;"></i>
                            }
                        </div>
                        <small class="text-muted">Based on @Model.ReviewCount reviews</small>
                    </div>

                    <!-- Rating Distribution -->
                    @if (Model.RatingDistribution != null && Model.RatingDistribution.Any())
                    {
                        <div class="rating-distribution">
                            @for (var i = 5; i >= 1; i--)
                            {
                                var percentage = Model.RatingDistribution.ContainsKey(i) ?
                                (Model.ReviewCount > 0 ? (Model.RatingDistribution[i] * 100 / Model.ReviewCount) : 0) : 0;

                                <div class="d-flex align-items-center mb-1">
                                    <div class="text-muted me-2">@i <i class="bi bi-star-fill" style="color: #ffc107;"></i></div>
                                    <div class="progress flex-grow-1" style="height: 8px;">
                                        <div class="progress-bar bg-warning" role="progressbar"
                                             style="width: @percentage%;"
                                             aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <div class="ms-2 text-muted small">@percentage%</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">No ratings distribution available</p>
                    }
                </div>
            </div>

            <!-- Similar Properties -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-primary text-white py-3">
                    <h5 class="mb-0">Similar Properties</h5>
                </div>
                <div class="card-body">
                    <div id="similarProperties">
                        <!-- Similar properties will be loaded here via AJAX -->
                        <div class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-muted mt-2">Loading similar properties...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Contact Agent Modal -->
<div class="modal fade" id="contactAgentModal" tabindex="-1" aria-labelledby="contactAgentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="contactAgentModalLabel">Contact @Model.AgentName</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="contactAgentForm">
                    <input type="hidden" name="propertyId" value="@Model.Id">
                    <input type="hidden" name="agentId" value="@Model.AgentId">
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        <label for="contactName" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="contactName" name="contactName" required>
                    </div>

                    <div class="mb-3">
                        <label for="contactEmail" class="form-label">Your Email</label>
                        <input type="email" class="form-control" id="contactEmail" name="contactEmail" required>
                    </div>

                    <div class="mb-3">
                        <label for="contactPhone" class="form-label">Your Phone</label>
                        <input type="tel" class="form-control" id="contactPhone" name="contactPhone">
                    </div>

                    <div class="mb-3">
                        <label for="contactMessage" class="form-label">Message</label>
                        <textarea class="form-control" id="contactMessage" name="contactMessage" rows="4" required>I'm interested in this property (@Model.Title) and would like more information.</textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="sendContactForm">Send Message</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBt_ml8mQwff3IOj4wl21f03VX7AMb9heo&libraries=drawing&callback=initMap" defer></script>
    <script>
        // Global variables
        let map;
        let marker;
        let propertyLocation = { lat: @(Model.Latitude == null ? 40.7128:Model.Latitude), lng: @(Model.Longitude == null ? -74.0060:Model.Longitude) };
        
        // Initialize map
        function initMap() {
            // Create map centered at property locationa
            map = new google.maps.Map(document.getElementById("propertyMap"), {
                zoom: 15,
                center: propertyLocation,
                mapTypeControl: true,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
                },
                fullscreenControl: true,
                streetViewControl: true,
                zoomControl: true
            });
            
            // Add marker for property
            marker = new google.maps.Marker({
                position: propertyLocation,
                map: map,
                title: "@Model.Title",
                animation: google.maps.Animation.DROP
            });
            
            // Add info window for property
            const infoWindow = new google.maps.InfoWindow({
                content: `
                    <div style="max-width: 200px;">
                        <h6 style="margin-bottom: 5px;">@Model.Title</h6>
                        <p style="margin-bottom: 5px;">@Model.Address</p>
                        <p style="margin-bottom: 0;"><strong>$@Model.Price.ToString("N0")</strong></p>
                    </div>
                `
            });
            
            // Open info window when marker is clicked
            marker.addListener('click', function() {
                infoWindow.open(map, marker);
            });
            
            // Initially open the info window
            infoWindow.open(map, marker);
        }
        
        // Document ready handler
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Bootstrap carousel with proper settings
            var propertyCarousel = new bootstrap.Carousel(document.getElementById('propertyCarousel'), {
                interval: 5000,  // 5 seconds between slides
                wrap: true,      // Loop back to beginning
                keyboard: true   // Allow keyboard navigation
            });
            
            // Listen for tab activation
            document.getElementById('location-tab').addEventListener('shown.bs.tab', function () {
                // Initialize map only if not already initialized
                if (!map) {
                    initMap();
                } else {
                    // Trigger resize to fix rendering issues when tab was hidden
                    google.maps.event.trigger(map, 'resize');
                    map.setCenter(propertyLocation);
                }
            });
            
            // Track carousel image index for the counter in top-right
            const carousel = document.getElementById('propertyCarousel');
            const currentImageIndex = document.getElementById('currentImageIndex');
            
            if (carousel && currentImageIndex) {
                carousel.addEventListener('slid.bs.carousel', function (event) {
                    currentImageIndex.textContent = (event.to + 1);
                });
            }
            
            // Favorite button functionality
            $('#favoriteButton').on('click', function () {
                const propertyId = $(this).data('property-id');

                $.ajax({
                    url: '@Url.Action("ToggleFavoriteAjax")',
                    type: 'POST',
                    data: { propertyId: propertyId },
                    success: function (response) {
                        const button = $('#favoriteButton');
                        const icon = button.find('i');
                        const text = button.find('#favoriteText');

                        if (response.isFavorite) {
                            button.removeClass('btn-outline-danger').addClass('btn-danger');
                            icon.removeClass('bi-heart').addClass('bi-heart-fill');
                            text.text('Remove from Favorites');
                        } else {
                            button.removeClass('btn-danger').addClass('btn-outline-danger');
                            icon.removeClass('bi-heart-fill').addClass('bi-heart');
                            text.text('Add to Favorites');
                        }
                    }
                });
            });

            // Star rating handler
            $('.rating__input').on('click', function () {
                let value = $(this).val();
                $('.rating__input').each(function (index) {
                    let star = index + 1;
                    if (star <= value) {
                        $(this).siblings('label').find('i').removeClass('bi-star').addClass('bi-star-fill');
                    } else {
                        $(this).siblings('label').find('i').removeClass('bi-star-fill').addClass('bi-star');
                    }
                });
            });
            
            // Load similar properties via AJAX
            loadSimilarProperties();
            
            // Contact agent form submission
            $('#sendContactForm').on('click', function() {
                const form = $('#contactAgentForm');
                if (form[0].checkValidity()) {
                    const formData = form.serialize();
                    
                    $.ajax({
                        url: '@Url.Action("ContactAgent", "Property")',
                        type: 'POST',
                        data: formData,
                        success: function(response) {
                            if (response.success) {
                                $('#contactAgentModal').modal('hide');
                                showToast('Message sent successfully. The agent will contact you soon.');
                                form[0].reset();
                            } else {
                                showToast('Error sending message. Please try again later.', 'error');
                            }
                        },
                        error: function() {
                            showToast('Error sending message. Please try again later.', 'error');
                        }
                    });
                } else {
                    form[0].reportValidity();
                }
            });

            // Manual control for carousel navigation
            document.querySelector('.carousel-control-prev').addEventListener('click', function() {
                propertyCarousel.prev();
            });
            
            document.querySelector('.carousel-control-next').addEventListener('click', function() {
                propertyCarousel.next();
            });
            
            // Load initial reviews
            loadReviews(1);
            
            // Submit review via AJAX
            $('#submitReview').on('click', function() {
                submitReview();
            });
            
            // Handle pagination clicks
            $(document).on('click', '.pagination .page-link', function(e) {
                e.preventDefault();
                const page = $(this).data('page');
                loadReviews(page);
            });
            
            // Handle review deletion
            $(document).on('click', '.delete-review', function() {
                if (confirm('Are you sure you want to delete this review?')) {
                    const reviewId = $(this).data('review-id');
                    deleteReview(reviewId);
                }
            });
        });
        
        // Load similar properties
        function loadSimilarProperties() {
            $.ajax({
                url: '@Url.Action("GetSimilarProperties", "Property")',
                type: 'GET',
                data: { 
                    propertyId: @Model.Id,
                    propertyType: '@Model.Type',
                    city: '@Model.City',
                    limit: 3
                },
                success: function(response) {
                    $('#similarProperties').html(response);
                },
                error: function() {
                    $('#similarProperties').html('<p class="text-muted">Unable to load similar properties</p>');
                }
            });
        }
        
        // Function to load reviews
        function loadReviews(page = 1) {
            const propertyId = @Model.Id;
            $('#reviewsLoading').show();
            
            $.ajax({
                url: '@Url.Action("GetPropertyReviews", "User")',
                type: 'GET',
                data: {
                    propertyId: propertyId,
                    page: page,
                    pageSize: 5
                },
                success: function(response) {
                    $('#reviewsContainer').html(response);
                    
                    // Initialize tooltips
                    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                    tooltipTriggerList.map(function (tooltipTriggerEl) {
                        return new bootstrap.Tooltip(tooltipTriggerEl);
                    });
                    
                    // Smooth scroll to reviews if page > 1
                    if (page > 1) {
                        $('html, body').animate({
                            scrollTop: $('#reviewsContainer').offset().top - 100
                        }, 500);
                    }
                },
                error: function() {
                    $('#reviewsContainer').html('<div class="alert alert-danger">Failed to load reviews. Please try again later.</div>');
                },
                complete: function() {
                    $('#reviewsLoading').hide();
                }
            });
        }
        
        // Function to submit a new review
        function submitReview() {
            const form = $('#reviewForm');

            // Validate form
            if (!form[0].checkValidity()) {
                form[0].reportValidity();
                return;
            }

            // Get selected rating
            const rating = $('input[name="Rating"]:checked').val();
            if (!rating) {
                alert('Please select a rating');
                return;
            }

            // Disable submit button and show loading
            $('#submitReview').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...');

            // Get the form data and add the anti-forgery token
            const formData = new FormData(form[0]);

            $.ajax({
                url: '@Url.Action("AddReview", "User")',
                type: 'POST',
                data: form.serialize(),
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                },
                success: function (response) {
                    // Check if response indicates success
                    if (response.success) {
                        // Clear form
                        $('#reviewComment').val('');
                        $('input[name="Rating"]').prop('checked', false);

                        // Reset star UI
                        $('.rating__input').each(function () {
                            $(this).siblings('label').find('i').removeClass('bi-star-fill').addClass('bi-star');
                        });

                        // Show success message
                        showToast('Your review has been added successfully!', 'success');

                        // Reload reviews
                        loadReviews(1);
                    } else {
                        showToast('Error submitting review. Please try again.', 'error');
                        console.error("Server returned error:", response);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error:", xhr.responseText);
                    console.error("Status:", status);
                    console.error("Error:", error);
                    showToast('Failed to submit your review. Please try again.', 'error');
                },
                complete: function () {
                    $('#submitReview').prop('disabled', false).text('Submit Review');
                }
            });
        }

        $(document).ready(function () {
            // Contact agent form submission
            $('#sendContactForm').on('click', function () {
                const form = $('#contactAgentForm');
                if (form[0].checkValidity()) {
                    // Show loading state
                    const button = $(this);
                    button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...');

                    const formData = form.serialize();

                    // Add anti-forgery token
                    formData += '&__RequestVerificationToken=' + $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: '/Property/ContactAgent',
                        type: 'POST',
                        data: formData,
                        success: function (response) {
                            if (response.success) {
                                // Hide modal
                                $('#contactAgentModal').modal('hide');

                                // Show success message
                                showToast('Your message has been sent to the agent. They will contact you soon.', 'success');

                                // Reset form
                                form[0].reset();

                                // Pre-fill message template for next time
                                $('#contactMessage').val('I\'m interested in this property (' + '@Model.Title' + ') and would like more information.');
                            } else {
                                showToast(response.message || 'Error sending message. Please try again later.', 'error');
                            }
                        },
                        error: function (xhr) {
                            let errorMessage = 'Error sending message. Please try again later.';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            showToast(errorMessage, 'error');
                        },
                        complete: function () {
                            // Restore button state
                            button.prop('disabled', false).text('Send Message');
                        }
                    });
                } else {
                    form[0].reportValidity();
                }
            });
        });

        // Function to delete a review
        function deleteReview(reviewId) {
            $.ajax({
                url: '@Url.Action("RemoveReview", "User")',
                type: 'POST',
                data: {
                    reviewId: reviewId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function () {
                    showToast('Review deleted successfully', 'success');
                    loadReviews(1);
                },
                error: function (xhr) {
                    if (xhr.status === 403) {
                        showToast('You do not have permission to delete this review', 'error');
                    } else {
                        showToast('Failed to delete review', 'error');
                    }
                }
            });

        }
    </script>
}